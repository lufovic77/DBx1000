g++ -c -Wall -g -std=c++0x -I. -I./benchmarks -I./concurrency_control -I./storage -I./system  -lrt -lpthread -msse4.2 -march=native -ffast-math -Werror -O3 -D_GNU_SOURCE -fopenmp -D NOGRAPHITE=1 -Werror -O3 -o concurrency_control/locktable.o concurrency_control/locktable.cpp
g++ -c -Wall -g -std=c++0x -I. -I./benchmarks -I./concurrency_control -I./storage -I./system  -lrt -lpthread -msse4.2 -march=native -ffast-math -Werror -O3 -D_GNU_SOURCE -fopenmp -D NOGRAPHITE=1 -Werror -O3 -o storage/taurus_log.o storage/taurus_log.cpp
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h: In member function 'void LockTable::try_evict_locktable_bucket(LockTableValue&)':
concurrency_control/locktable.h:205:75: error: comparison between 'enum lock_t' and 'enum lock_t_logging' [-Werror=enum-compare]
             if ((*it)->evicted || (*it)->row->manager->get_lock_type() != LOCK_NONE_T)
                                                                           ^~~~~~~~~~~
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h: In member function 'RC LockTable::get_row(row_t*, access_t, txn_man*, char*&, lsnType*, lsnType*, bool, uint64_t, bool)':
concurrency_control/locktable.h:423:74: error: no matching function for call to 'Row_lock::conflict_lock(lock_t_logging&, lock_t)'
         if (row->manager->conflict_lock(lt, row->manager->get_lock_type())) // do not perform write tid check
                                                                          ^
In file included from concurrency_control/locktable.h:8:0,
                 from concurrency_control/locktable.cpp:4:
concurrency_control/row_lock.h:54:9: note: candidate: bool Row_lock::conflict_lock(lock_t, lock_t)
  bool   conflict_lock(lock_t l1, lock_t l2);
         ^~~~~~~~~~~~~
concurrency_control/row_lock.h:54:9: note:   no known conversion for argument 1 from 'lock_t_logging' to 'lock_t'
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h:435:82: error: no matching function for call to 'Row_lock::conflict_lock(lock_t_logging&, lock_t)'
                 if (row->manager->conflict_lock(lt, row->manager->get_lock_type())) // do not perform write tid check
                                                                                  ^
In file included from concurrency_control/locktable.h:8:0,
                 from concurrency_control/locktable.cpp:4:
concurrency_control/row_lock.h:54:9: note: candidate: bool Row_lock::conflict_lock(lock_t, lock_t)
  bool   conflict_lock(lock_t l1, lock_t l2);
         ^~~~~~~~~~~~~
concurrency_control/row_lock.h:54:9: note:   no known conversion for argument 1 from 'lock_t_logging' to 'lock_t'
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h:472:60: error: no matching function for call to 'row_t::get_row(access_t&, txn_man*&, char*&)'
                     ret = lti->row->get_row(type, txn, data);
                                                            ^
In file included from concurrency_control/locktable.h:6:0,
                 from concurrency_control/locktable.cpp:4:
./storage/row.h:93:5: note: candidate: RC row_t::get_row(access_t, txn_man*, row_t*&)
  RC get_row(access_t type, txn_man * txn, row_t *& row);
     ^~~~~~~
./storage/row.h:93:5: note:   no known conversion for argument 3 from 'char*' to 'row_t*&'
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h:589:72: error: comparison between 'enum lock_t' and 'enum lock_t_logging' [-Werror=enum-compare]
             if (lti->evicted || (lti->row->manager->get_lock_type() == LOCK_NONE_T && try_evict_item(lti))) // we do not need to actually set 'lti->evicted = true' here.
                                                                        ^~~~~~~~~~~
concurrency_control/locktable.h:688:55: error: no matching function for call to 'row_t::get_row(access_t&, txn_man*&, char*&)'
                     ret = row->get_row(type, txn, data);
                                                       ^
In file included from concurrency_control/locktable.h:6:0,
                 from concurrency_control/locktable.cpp:4:
./storage/row.h:93:5: note: candidate: RC row_t::get_row(access_t, txn_man*, row_t*&)
  RC get_row(access_t type, txn_man * txn, row_t *& row);
     ^~~~~~~
./storage/row.h:93:5: note:   no known conversion for argument 3 from 'char*' to 'row_t*&'
In file included from concurrency_control/locktable.cpp:1:0:
./config.h:350:38: error: 'ALIGN_SIZE' was not declared in this scope
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                      ^
./config.h:360:16: note: in expansion of macro 'MM_MALLOC'
 #define MALLOC MM_MALLOC
                ^~~~~~~~~
concurrency_control/locktable.h:700:55: note: in expansion of macro 'MALLOC'
         LockTableListItem *lti = (LockTableListItem *)MALLOC(sizeof(LockTableListItem), GET_THD_ID);
                                                       ^~~~~~
./config.h:350:38: note: suggested alternative: 'PAGE_SIZE'
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                      ^
./config.h:360:16: note: in expansion of macro 'MM_MALLOC'
 #define MALLOC MM_MALLOC
                ^~~~~~~~~
concurrency_control/locktable.h:700:55: note: in expansion of macro 'MALLOC'
         LockTableListItem *lti = (LockTableListItem *)MALLOC(sizeof(LockTableListItem), GET_THD_ID);
                                                       ^~~~~~
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h:724:47: error: no matching function for call to 'row_t::get_row(access_t&, txn_man*&, char*&)'
             ret = row->get_row(type, txn, data);
                                               ^
In file included from concurrency_control/locktable.h:6:0,
                 from concurrency_control/locktable.cpp:4:
./storage/row.h:93:5: note: candidate: RC row_t::get_row(access_t, txn_man*, row_t*&)
  RC get_row(access_t type, txn_man * txn, row_t *& row);
     ^~~~~~~
./storage/row.h:93:5: note:   no known conversion for argument 3 from 'char*' to 'row_t*&'
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h: In constructor 'LockTable::LockTable()':
concurrency_control/locktable.h:816:26: error: 'g_locktable_modifier' was not declared in this scope
         locktable_size = g_locktable_modifier * g_thread_cnt * g_req_per_query;
                          ^~~~~~~~~~~~~~~~~~~~
concurrency_control/locktable.h:816:26: note: suggested alternative: 'locktable_size'
         locktable_size = g_locktable_modifier * g_thread_cnt * g_req_per_query;
                          ^~~~~~~~~~~~~~~~~~~~
                          locktable_size
In file included from concurrency_control/locktable.cpp:1:0:
./config.h:350:38: error: 'ALIGN_SIZE' was not declared in this scope
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                      ^
./config.h:360:16: note: in expansion of macro 'MM_MALLOC'
 #define MALLOC MM_MALLOC
                ^~~~~~~~~
concurrency_control/locktable.h:838:37: note: in expansion of macro 'MALLOC'
         hashMap = (LockTableValue *)MALLOC(sizeof(LockTableValue) * locktable_size, GET_THD_ID);
                                     ^~~~~~
./config.h:350:38: note: suggested alternative: 'PAGE_SIZE'
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                      ^
./config.h:360:16: note: in expansion of macro 'MM_MALLOC'
 #define MALLOC MM_MALLOC
                ^~~~~~~~~
concurrency_control/locktable.h:838:37: note: in expansion of macro 'MALLOC'
         hashMap = (LockTableValue *)MALLOC(sizeof(LockTableValue) * locktable_size, GET_THD_ID);
                                     ^~~~~~
In file included from concurrency_control/locktable.cpp:4:0:
concurrency_control/locktable.h:840:28: error: 'aligned' was not declared in this scope
         uint32_t ltiSize = aligned(sizeof(LockTableListItem));
                            ^~~~~~~
concurrency_control/locktable.h:840:28: note: suggested alternative: 'signed'
         uint32_t ltiSize = aligned(sizeof(LockTableListItem));
                            ^~~~~~~
                            signed
In file included from concurrency_control/locktable.cpp:1:0:
concurrency_control/locktable.h:850:97: error: 'g_locktable_init_slots' was not declared in this scope
         char *ltiBuffer0 = (char *)MALLOC((ltiSize + ltiCacheSize) * (locktable_size / 2 + 1) * g_locktable_init_slots, 0);
                                                                                                 ^
./config.h:350:35: note: in definition of macro 'MM_MALLOC'
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                   ^
concurrency_control/locktable.h:850:36: note: in expansion of macro 'MALLOC'
         char *ltiBuffer0 = (char *)MALLOC((ltiSize + ltiCacheSize) * (locktable_size / 2 + 1) * g_locktable_init_slots, 0);
                                    ^~~~~~
concurrency_control/locktable.h:850:97: note: suggested alternative: 'locktable_size'
         char *ltiBuffer0 = (char *)MALLOC((ltiSize + ltiCacheSize) * (locktable_size / 2 + 1) * g_locktable_init_slots, 0);
                                                                                                 ^
./config.h:350:35: note: in definition of macro 'MM_MALLOC'
 #define MM_MALLOC(x,y) _mm_malloc(x, ALIGN_SIZE)
                                   ^
concurrency_control/locktable.h:850:36: note: in expansion of macro 'MALLOC'
         char *ltiBuffer0 = (char *)MALLOC((ltiSize + ltiCacheSize) * (locktable_size / 2 + 1) * g_locktable_init_slots, 0);
                                    ^~~~~~
g++ -c -Wall -g -std=c++0x -I. -I./benchmarks -I./concurrency_control -I./storage -I./system  -lrt -lpthread -msse4.2 -march=native -ffast-math -Werror -O3 -D_GNU_SOURCE -fopenmp -D NOGRAPHITE=1 -Werror -O3 -o storage/catalog.o storage/catalog.cpp
cc1plus: all warnings being treated as errors
Makefile:52: recipe for target 'concurrency_control/locktable.o' failed
make: *** [concurrency_control/locktable.o] Error 1
make: *** Waiting for unfinished jobs....
